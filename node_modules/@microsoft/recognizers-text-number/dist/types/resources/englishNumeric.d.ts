export declare namespace EnglishNumeric {
    const LangMarker = "Eng";
    const RoundNumberIntegerRegex = "(hundred|thousand|million|billion|trillion)";
    const ZeroToNineIntegerRegex = "(three|seven|eight|four|five|zero|nine|one|two|six)";
    const NegativeNumberTermsRegex = "((minus|negative)\\s+)";
    const NegativeNumberSignRegex: string;
    const AnIntRegex = "(an|a)(?=\\s)";
    const TenToNineteenIntegerRegex = "(seventeen|thirteen|fourteen|eighteen|nineteen|fifteen|sixteen|eleven|twelve|ten)";
    const TensNumberIntegerRegex = "(seventy|twenty|thirty|eighty|ninety|forty|fifty|sixty)";
    const SeparaIntRegex: string;
    const AllIntRegex: string;
    const PlaceHolderPureNumber = "\\b";
    const PlaceHolderDefault = "\\D|\\b";
    const NumbersWithPlaceHolder: (placeholder: string) => string;
    const NumbersWithSuffix = "(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s*(K|k|M|T|G)(?=\\b)";
    const RoundNumberIntegerRegexWithLocks: string;
    const NumbersWithDozenSuffix = "(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+dozen(s)?(?=\\b)";
    const AllIntRegexWithLocks: string;
    const AllIntRegexWithDozenSuffixLocks: string;
    const RoundNumberOrdinalRegex = "(hundredth|thousandth|millionth|billionth|trillionth)";
    const BasicOrdinalRegex = "(first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth|eleventh|twelfth|thirteenth|fourteenth|fifteenth|sixteenth|seventeenth|eighteenth|nineteenth|twentieth|thirtieth|fortieth|fiftieth|sixtieth|seventieth|eightieth|ninetieth)";
    const SuffixBasicOrdinalRegex: string;
    const SuffixRoundNumberOrdinalRegex: string;
    const AllOrdinalRegex: string;
    const OrdinalSuffixRegex = "(?<=\\b)((\\d*(1st|2nd|3rd|4th|5th|6th|7th|8th|9th|0th))|(11th|12th))(?=\\b)";
    const OrdinalNumericRegex = "(?<=\\b)(\\d{1,3}(\\s*,\\s*\\d{3})*\\s*th)(?=\\b)";
    const OrdinalRoundNumberRegex: string;
    const OrdinalEnglishRegex: string;
    const FractionNotationWithSpacesRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))";
    const FractionNotationRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))";
    const FractionNounRegex: string;
    const FractionNounWithArticleRegex: string;
    const FractionPrepositionRegex: string;
    const FractionPrepositionWithinPercentModeRegex: string;
    const AllPointRegex: string;
    const AllFloatRegex: string;
    const DoubleWithMultiplierRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))\\d+\\.\\d+\\s*(K|k|M|G|T|B|b)(?=\\b)";
    const DoubleExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))(\\d+(\\.\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)";
    const DoubleCaretExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))(\\d+(\\.\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)";
    const DoubleDecimalPointRegex: (placeholder: string) => string;
    const DoubleWithoutIntegralRegex: (placeholder: string) => string;
    const DoubleWithRoundNumber: string;
    const DoubleAllFloatRegex: string;
    const CurrencyRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s*(B|b|m|t|g)(?=\\b)";
    const NumberWithSuffixPercentage: string;
    const FractionNumberWithSuffixPercentage: string;
    const NumberWithPrefixPercentage: string;
    const NumberWithPrepositionPercentage: string;
    const TillRegex = "(to|through|--|-|—|——|~)";
    const MoreRegex = "((bigger|greater|more|higher|larger)(\\s+than)?|above|over|>)";
    const LessRegex = "((less|lower|smaller|fewer)(\\s+than)?|below|under|<)";
    const EqualRegex = "(equal(\\s+(to|than))?|=)";
    const MoreOrEqual: string;
    const MoreOrEqualSuffix = "(and|or)\\s+(more|greater|higher|larger|bigger)(?!\\s+than)";
    const LessOrEqual: string;
    const LessOrEqualSuffix = "(and|or)\\s+(less|lower|smaller|fewer)(?!\\s+than)";
    const OneNumberRangeMoreRegex1: string;
    const OneNumberRangeMoreRegex2: string;
    const OneNumberRangeLessRegex1: string;
    const OneNumberRangeLessRegex2: string;
    const OneNumberRangeEqualRegex: string;
    const TwoNumberRangeRegex1 = "between\\s*(the\\s+)?(?<number1>((?!((\\.(?!\\d+))|(,(?!\\d+)))).)+)\\s*and\\s*(the\\s+)?(?<number2>((?!((\\.(?!\\d+))|(,(?!\\d+)))).)+)";
    const TwoNumberRangeRegex2: string;
    const TwoNumberRangeRegex3: string;
    const TwoNumberRangeRegex4: string;
    const DecimalSeparatorChar = ".";
    const FractionMarkerToken = "over";
    const NonDecimalSeparatorChar = ",";
    const HalfADozenText = "six";
    const WordSeparatorToken = "and";
    const WrittenDecimalSeparatorTexts: string[];
    const WrittenGroupSeparatorTexts: string[];
    const WrittenIntegerSeparatorTexts: string[];
    const WrittenFractionSeparatorTexts: string[];
    const HalfADozenRegex = "half\\s+a\\s+dozen";
    const DigitalNumberRegex = "((?<=\\b)(hundred|thousand|million|billion|trillion|dozen(s)?)(?=\\b))|((?<=(\\d|\\b))(k|t|m|g|b)(?=\\b))";
    const CardinalNumberMap: ReadonlyMap<string, number>;
    const OrdinalNumberMap: ReadonlyMap<string, number>;
    const RoundNumberMap: ReadonlyMap<string, number>;
}

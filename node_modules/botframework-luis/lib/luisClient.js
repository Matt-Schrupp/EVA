/*
 * Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const ServiceClient = msRest.ServiceClient;
const WebResource = msRest.WebResource;

const models = require('./models');


/**
 * Query Luis for intents and entities.
 *
 * @param {string} id Luis model Id.
 *
 * @param {string} subscriptionKey Luis subscription key.
 *
 * @param {string} q Query submitted to LUIS service.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link LuisResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getIntentsAndEntities(id, subscriptionKey, q, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (id === null || id === undefined || typeof id.valueOf() !== 'string') {
      throw new Error('id cannot be null or undefined and it must be of type string.');
    }
    if (subscriptionKey === null || subscriptionKey === undefined || typeof subscriptionKey.valueOf() !== 'string') {
      throw new Error('subscriptionKey cannot be null or undefined and it must be of type string.');
    }
    if (q === null || q === undefined || typeof q.valueOf() !== 'string') {
      throw new Error('q cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v1/application';
  let queryParameters = [];
  queryParameters.push('id=' + encodeURIComponent(id));
  queryParameters.push('subscription-key=' + encodeURIComponent(subscriptionKey));
  queryParameters.push('q=' + encodeURIComponent(q));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['LuisResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Query Luis for intents and entities.
 *
 * @param {string} id Luis model Id.
 *
 * @param {string} subscriptionKey Luis subscription key.
 *
 * @param {string} q Query submitted to LUIS service.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.timezoneOffset] The timezone offset for the
 * location of the request.
 *
 * @param {string} [options.contextId] The conversation id for dialog.
 *
 * @param {boolean} [options.verbose] If true will return all intents instead
 * of just the topscoring intent.
 *
 * @param {string} [options.forceSet] A parameter name to override in the
 * action parameters with a new value.
 *
 * @param {string} [options.allowSampling] A parameter to allow logging the
 * data so they can be accessed.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link LuisResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getIntentsAndEntitiesV2(id, subscriptionKey, q, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let timezoneOffset = (options && options.timezoneOffset !== undefined) ? options.timezoneOffset : undefined;
  let contextId = (options && options.contextId !== undefined) ? options.contextId : undefined;
  let verbose = (options && options.verbose !== undefined) ? options.verbose : undefined;
  let forceSet = (options && options.forceSet !== undefined) ? options.forceSet : undefined;
  let allowSampling = (options && options.allowSampling !== undefined) ? options.allowSampling : undefined;
  // Validate
  try {
    if (id === null || id === undefined || typeof id.valueOf() !== 'string') {
      throw new Error('id cannot be null or undefined and it must be of type string.');
    }
    if (subscriptionKey === null || subscriptionKey === undefined || typeof subscriptionKey.valueOf() !== 'string') {
      throw new Error('subscriptionKey cannot be null or undefined and it must be of type string.');
    }
    if (q === null || q === undefined || typeof q.valueOf() !== 'string') {
      throw new Error('q cannot be null or undefined and it must be of type string.');
    }
    if (timezoneOffset !== null && timezoneOffset !== undefined && typeof timezoneOffset !== 'number') {
      throw new Error('timezoneOffset must be of type number.');
    }
    if (contextId !== null && contextId !== undefined && typeof contextId.valueOf() !== 'string') {
      throw new Error('contextId must be of type string.');
    }
    if (verbose !== null && verbose !== undefined && typeof verbose !== 'boolean') {
      throw new Error('verbose must be of type boolean.');
    }
    if (forceSet !== null && forceSet !== undefined && typeof forceSet.valueOf() !== 'string') {
      throw new Error('forceSet must be of type string.');
    }
    if (allowSampling !== null && allowSampling !== undefined && typeof allowSampling.valueOf() !== 'string') {
      throw new Error('allowSampling must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2.0/apps/{id}';
  requestUrl = requestUrl.replace('{id}', encodeURIComponent(id));
  let queryParameters = [];
  queryParameters.push('subscription-key=' + encodeURIComponent(subscriptionKey));
  queryParameters.push('q=' + encodeURIComponent(q));
  if (timezoneOffset !== null && timezoneOffset !== undefined) {
    queryParameters.push('timezoneOffset=' + encodeURIComponent(timezoneOffset.toString()));
  }
  if (contextId !== null && contextId !== undefined) {
    queryParameters.push('contextId=' + encodeURIComponent(contextId));
  }
  if (verbose !== null && verbose !== undefined) {
    queryParameters.push('verbose=' + encodeURIComponent(verbose.toString()));
  }
  if (forceSet !== null && forceSet !== undefined) {
    queryParameters.push('forceSet=' + encodeURIComponent(forceSet));
  }
  if (allowSampling !== null && allowSampling !== undefined) {
    queryParameters.push('allowSampling=' + encodeURIComponent(allowSampling));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['LuisResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a LuisClient. */
class LuisClient extends ServiceClient {
  /**
   * Create a LuisClient.
   * @param {string} [baseUri] - The base URI of the service.
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   */
  constructor(baseUri, options) {

    if (!options) options = {};

    super(null, options);

    this.baseUri = baseUri;
    if (!this.baseUri) {
      this.baseUri = 'https://westus.api.cognitive.microsoft.com/luis/';
    }

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    this.models = models;
    this._getIntentsAndEntities = _getIntentsAndEntities;
    this._getIntentsAndEntitiesV2 = _getIntentsAndEntitiesV2;
    msRest.addSerializationMixin(this);
  }

  /**
   * Query Luis for intents and entities.
   *
   * @param {string} id Luis model Id.
   *
   * @param {string} subscriptionKey Luis subscription key.
   *
   * @param {string} q Query submitted to LUIS service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<LuisResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getIntentsAndEntitiesWithHttpOperationResponse(id, subscriptionKey, q, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getIntentsAndEntities(id, subscriptionKey, q, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Query Luis for intents and entities.
   *
   * @param {string} id Luis model Id.
   *
   * @param {string} subscriptionKey Luis subscription key.
   *
   * @param {string} q Query submitted to LUIS service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {LuisResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link LuisResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getIntentsAndEntities(id, subscriptionKey, q, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getIntentsAndEntities(id, subscriptionKey, q, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getIntentsAndEntities(id, subscriptionKey, q, options, optionalCallback);
    }
  }

  /**
   * Query Luis for intents and entities.
   *
   * @param {string} id Luis model Id.
   *
   * @param {string} subscriptionKey Luis subscription key.
   *
   * @param {string} q Query submitted to LUIS service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.timezoneOffset] The timezone offset for the
   * location of the request.
   *
   * @param {string} [options.contextId] The conversation id for dialog.
   *
   * @param {boolean} [options.verbose] If true will return all intents instead
   * of just the topscoring intent.
   *
   * @param {string} [options.forceSet] A parameter name to override in the
   * action parameters with a new value.
   *
   * @param {string} [options.allowSampling] A parameter to allow logging the
   * data so they can be accessed.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<LuisResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getIntentsAndEntitiesV2WithHttpOperationResponse(id, subscriptionKey, q, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getIntentsAndEntitiesV2(id, subscriptionKey, q, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Query Luis for intents and entities.
   *
   * @param {string} id Luis model Id.
   *
   * @param {string} subscriptionKey Luis subscription key.
   *
   * @param {string} q Query submitted to LUIS service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.timezoneOffset] The timezone offset for the
   * location of the request.
   *
   * @param {string} [options.contextId] The conversation id for dialog.
   *
   * @param {boolean} [options.verbose] If true will return all intents instead
   * of just the topscoring intent.
   *
   * @param {string} [options.forceSet] A parameter name to override in the
   * action parameters with a new value.
   *
   * @param {string} [options.allowSampling] A parameter to allow logging the
   * data so they can be accessed.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {LuisResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link LuisResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getIntentsAndEntitiesV2(id, subscriptionKey, q, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getIntentsAndEntitiesV2(id, subscriptionKey, q, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getIntentsAndEntitiesV2(id, subscriptionKey, q, options, optionalCallback);
    }
  }

}

module.exports = LuisClient;
